
import numpy as np
import pandas as pd
import matplotlib as plt
import seaborn as sns
data = pd.read_csv('lol.csv')
data.head()
name	company	year	Price	kms_driven	fuel_type
0	Hyundai Santro Xing XO eRLX Euro III	Hyundai	2007	80,000	45,000 kms	Petrol
1	Mahindra Jeep CL550 MDI	Mahindra	2006	4,25,000	40 kms	Diesel
2	Maruti Suzuki Alto 800 Vxi	Maruti	2018	Ask For Price	22,000 kms	Petrol
3	Hyundai Grand i10 Magna 1.2 Kappa VTVT	Hyundai	2014	3,25,000	28,000 kms	Petrol
4	Ford EcoSport Titanium 1.5L TDCi	Ford	2014	5,75,000	36,000 kms	Diesel
data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 892 entries, 0 to 891
Data columns (total 6 columns):
 #   Column      Non-Null Count  Dtype 
---  ------      --------------  ----- 
 0   name        892 non-null    object
 1   company     892 non-null    object
 2   year        892 non-null    object
 3   Price       892 non-null    object
 4   kms_driven  840 non-null    object
 5   fuel_type   837 non-null    object
dtypes: object(6)
memory usage: 41.9+ KB
data.describe()
name	company	year	Price	kms_driven	fuel_type
count	892	892	892	892	840	837
unique	525	48	61	274	258	3
top	Honda City	Maruti	2015	Ask For Price	45,000 kms	Petrol
freq	13	235	117	35	30	440
data['year'].unique()
array(['2007', '2006', '2018', '2014', '2015', '2012', '2013', '2016',
       '2010', '2017', '2008', '2011', '2019', '2009', '2005', '2000',
       '...', '150k', 'TOUR', '2003', 'r 15', '2004', 'Zest', '/-Rs',
       'sale', '1995', 'ara)', '2002', 'SELL', '2001', 'tion', 'odel',
       '2 bs', 'arry', 'Eon', 'o...', 'ture', 'emi', 'car', 'able', 'no.',
       'd...', 'SALE', 'digo', 'sell', 'd Ex', 'n...', 'e...', 'D...',
       ', Ac', 'go .', 'k...', 'o c4', 'zire', 'cent', 'Sumo', 'cab',
       't xe', 'EV2', 'r...', 'zest'], dtype=object)
backup = data.copy()
data['Price'].unique()
array(['80,000', '4,25,000', 'Ask For Price', '3,25,000', '5,75,000',
       '1,75,000', '1,90,000', '8,30,000', '2,50,000', '1,82,000',
       '3,15,000', '4,15,000', '3,20,000', '10,00,000', '5,00,000',
       '3,50,000', '1,60,000', '3,10,000', '75,000', '1,00,000',
       '2,90,000', '95,000', '1,80,000', '3,85,000', '1,05,000',
       '6,50,000', '6,89,999', '4,48,000', '5,49,000', '5,01,000',
       '4,89,999', '2,80,000', '3,49,999', '2,84,999', '3,45,000',
       '4,99,999', '2,35,000', '2,49,999', '14,75,000', '3,95,000',
       '2,20,000', '1,70,000', '85,000', '2,00,000', '5,70,000',
       '1,10,000', '4,48,999', '18,91,111', '1,59,500', '3,44,999',
       '4,49,999', '8,65,000', '6,99,000', '3,75,000', '2,24,999',
       '12,00,000', '1,95,000', '3,51,000', '2,40,000', '90,000',
       '1,55,000', '6,00,000', '1,89,500', '2,10,000', '3,90,000',
       '1,35,000', '16,00,000', '7,01,000', '2,65,000', '5,25,000',
       '3,72,000', '6,35,000', '5,50,000', '4,85,000', '3,29,500',
       '2,51,111', '5,69,999', '69,999', '2,99,999', '3,99,999',
       '4,50,000', '2,70,000', '1,58,400', '1,79,000', '1,25,000',
       '2,99,000', '1,50,000', '2,75,000', '2,85,000', '3,40,000',
       '70,000', '2,89,999', '8,49,999', '7,49,999', '2,74,999',
       '9,84,999', '5,99,999', '2,44,999', '4,74,999', '2,45,000',
       '1,69,500', '3,70,000', '1,68,000', '1,45,000', '98,500',
       '2,09,000', '1,85,000', '9,00,000', '6,99,999', '1,99,999',
       '5,44,999', '1,99,000', '5,40,000', '49,000', '7,00,000', '55,000',
       '8,95,000', '3,55,000', '5,65,000', '3,65,000', '40,000',
       '4,00,000', '3,30,000', '5,80,000', '3,79,000', '2,19,000',
       '5,19,000', '7,30,000', '20,00,000', '21,00,000', '14,00,000',
       '3,11,000', '8,55,000', '5,35,000', '1,78,000', '3,00,000',
       '2,55,000', '5,49,999', '3,80,000', '57,000', '4,10,000',
       '2,25,000', '1,20,000', '59,000', '5,99,000', '6,75,000', '72,500',
       '6,10,000', '2,30,000', '5,20,000', '5,24,999', '4,24,999',
       '6,44,999', '5,84,999', '7,99,999', '4,44,999', '6,49,999',
       '9,44,999', '5,74,999', '3,74,999', '1,30,000', '4,01,000',
       '13,50,000', '1,74,999', '2,39,999', '99,999', '3,24,999',
       '10,74,999', '11,30,000', '1,49,000', '7,70,000', '30,000',
       '3,35,000', '3,99,000', '65,000', '1,69,999', '1,65,000',
       '5,60,000', '9,50,000', '7,15,000', '45,000', '9,40,000',
       '1,55,555', '15,00,000', '4,95,000', '8,00,000', '12,99,000',
       '5,30,000', '14,99,000', '32,000', '4,05,000', '7,60,000',
       '7,50,000', '4,19,000', '1,40,000', '15,40,000', '1,23,000',
       '4,98,000', '4,80,000', '4,88,000', '15,25,000', '5,48,900',
       '7,25,000', '99,000', '52,000', '28,00,000', '4,99,000',
       '3,81,000', '2,78,000', '6,90,000', '2,60,000', '90,001',
       '1,15,000', '15,99,000', '1,59,000', '51,999', '2,15,000',
       '35,000', '11,50,000', '2,69,000', '60,000', '4,30,000',
       '85,00,003', '4,01,919', '4,90,000', '4,24,000', '2,05,000',
       '5,49,900', '3,71,500', '4,35,000', '1,89,700', '3,89,700',
       '3,60,000', '2,95,000', '1,14,990', '10,65,000', '4,70,000',
       '48,000', '1,88,000', '4,65,000', '1,79,999', '21,90,000',
       '23,90,000', '10,75,000', '4,75,000', '10,25,000', '6,15,000',
       '19,00,000', '14,90,000', '15,10,000', '18,50,000', '7,90,000',
       '17,25,000', '12,25,000', '68,000', '9,70,000', '31,00,000',
       '8,99,000', '88,000', '53,000', '5,68,500', '71,000', '5,90,000',
       '7,95,000', '42,000', '1,89,000', '1,62,000', '35,999',
       '29,00,000', '39,999', '50,500', '5,10,000', '8,60,000',
       '5,00,001'], dtype=object)
data['Price']
0             80,000
1           4,25,000
2      Ask For Price
3           3,25,000
4           5,75,000
           ...      
887         3,10,000
888         2,60,000
889         3,90,000
890         1,80,000
891         1,60,000
Name: Price, Length: 892, dtype: object
data[data['Price'] == 'Ask For Price']['Price'].count()

        
35
data['year'].unique()
array(['2007', '2006', '2018', '2014', '2015', '2012', '2013', '2016',
       '2010', '2017', '2008', '2011', '2019', '2009', '2005', '2000',
       '...', '150k', 'TOUR', '2003', 'r 15', '2004', 'Zest', '/-Rs',
       'sale', '1995', 'ara)', '2002', 'SELL', '2001', 'tion', 'odel',
       '2 bs', 'arry', 'Eon', 'o...', 'ture', 'emi', 'car', 'able', 'no.',
       'd...', 'SALE', 'digo', 'sell', 'd Ex', 'n...', 'e...', 'D...',
       ', Ac', 'go .', 'k...', 'o c4', 'zire', 'cent', 'Sumo', 'cab',
       't xe', 'EV2', 'r...', 'zest'], dtype=object)
data = data[data["year"].str.isnumeric()]
    
    
data['year'] = data['year'].astype(int)
data = data[data['Price'] != 'Ask For Price']
data.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 819 entries, 0 to 891
Data columns (total 6 columns):
 #   Column      Non-Null Count  Dtype 
---  ------      --------------  ----- 
 0   name        819 non-null    object
 1   company     819 non-null    object
 2   year        819 non-null    int32 
 3   Price       819 non-null    object
 4   kms_driven  819 non-null    object
 5   fuel_type   816 non-null    object
dtypes: int32(1), object(5)
memory usage: 41.6+ KB
data['Price'] = data['Price'].str.replace(',','')
data['Price'] = data['Price'].astype(int)
data['fuel_type'].unique()
array(['Petrol', 'Diesel', nan, 'LPG'], dtype=object)
data = data.dropna()
 
data['kms_driven'] = data['kms_driven'].str.strip(" kms")
data['kms_driven'] = data['kms_driven'].str.replace(',','')
data = data[data["kms_driven"].str.isnumeric()]
data["kms_driven"]= data["kms_driven"].astype(int)
data.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 816 entries, 0 to 889
Data columns (total 6 columns):
 #   Column      Non-Null Count  Dtype 
---  ------      --------------  ----- 
 0   name        816 non-null    object
 1   company     816 non-null    object
 2   year        816 non-null    int32 
 3   Price       816 non-null    int32 
 4   kms_driven  816 non-null    int32 
 5   fuel_type   816 non-null    object
dtypes: int32(3), object(3)
memory usage: 35.1+ KB
data['name'] =data['name'].str.split(" ").str.slice(0,3).str.join(" ")
data = data.reset_index(drop = True)
data.describe()
year	Price	kms_driven
count	816.000000	8.160000e+02	816.000000
mean	2012.444853	4.117176e+05	46275.531863
std	4.002992	4.751844e+05	34297.428044
min	1995.000000	3.000000e+04	0.000000
25%	2010.000000	1.750000e+05	27000.000000
50%	2013.000000	2.999990e+05	41000.000000
75%	2015.000000	4.912500e+05	56818.500000
max	2019.000000	8.500003e+06	400000.000000
data=data[data['Price']<6000000]
data = data.reset_index(drop = True)
data.head()
name	company	year	Price	kms_driven	fuel_type
0	Hyundai Santro Xing	Hyundai	2007	80000	45000	Petrol
1	Mahindra Jeep CL550	Mahindra	2006	425000	40	Diesel
2	Hyundai Grand i10	Hyundai	2014	325000	28000	Petrol
3	Ford EcoSport Titanium	Ford	2014	575000	36000	Diesel
4	Ford Figo	Ford	2012	175000	41000	Diesel
data.to_csv('cleaneddata.csv')
regression model
regdata = pd.read_csv("cleaneddata.csv")
regdata.reset_index(drop = True)
Unnamed: 0	name	company	year	Price	kms_driven	fuel_type
0	0	Hyundai Santro Xing	Hyundai	2007	80000	45000	Petrol
1	1	Mahindra Jeep CL550	Mahindra	2006	425000	40	Diesel
2	2	Hyundai Grand i10	Hyundai	2014	325000	28000	Petrol
3	3	Ford EcoSport Titanium	Ford	2014	575000	36000	Diesel
4	4	Ford Figo	Ford	2012	175000	41000	Diesel
...	...	...	...	...	...	...	...
810	810	Maruti Suzuki Ritz	Maruti	2011	270000	50000	Petrol
811	811	Tata Indica V2	Tata	2009	110000	30000	Diesel
812	812	Toyota Corolla Altis	Toyota	2009	300000	132000	Petrol
813	813	Tata Zest XM	Tata	2018	260000	27000	Diesel
814	814	Mahindra Quanto C8	Mahindra	2013	390000	40000	Diesel
815 rows Ã— 7 columns

regdata = regdata.drop(columns = "Unnamed: 0")
x = regdata.drop(columns = 'Price')
print(x)
                       name   company  year  kms_driven fuel_type
0       Hyundai Santro Xing   Hyundai  2007       45000    Petrol
1       Mahindra Jeep CL550  Mahindra  2006          40    Diesel
2         Hyundai Grand i10   Hyundai  2014       28000    Petrol
3    Ford EcoSport Titanium      Ford  2014       36000    Diesel
4                 Ford Figo      Ford  2012       41000    Diesel
..                      ...       ...   ...         ...       ...
810      Maruti Suzuki Ritz    Maruti  2011       50000    Petrol
811          Tata Indica V2      Tata  2009       30000    Diesel
812    Toyota Corolla Altis    Toyota  2009      132000    Petrol
813            Tata Zest XM      Tata  2018       27000    Diesel
814      Mahindra Quanto C8  Mahindra  2013       40000    Diesel

[815 rows x 5 columns]
y = regdata['Price']
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)
print(x)
                       name   company  year  kms_driven fuel_type
0       Hyundai Santro Xing   Hyundai  2007       45000    Petrol
1       Mahindra Jeep CL550  Mahindra  2006          40    Diesel
2         Hyundai Grand i10   Hyundai  2014       28000    Petrol
3    Ford EcoSport Titanium      Ford  2014       36000    Diesel
4                 Ford Figo      Ford  2012       41000    Diesel
..                      ...       ...   ...         ...       ...
810      Maruti Suzuki Ritz    Maruti  2011       50000    Petrol
811          Tata Indica V2      Tata  2009       30000    Diesel
812    Toyota Corolla Altis    Toyota  2009      132000    Petrol
813            Tata Zest XM      Tata  2018       27000    Diesel
814      Mahindra Quanto C8  Mahindra  2013       40000    Diesel

[815 rows x 5 columns]
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
ohe = OneHotEncoder()
ohe.fit(x[['name','company','fuel_type']])
OneHotEncoder()
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),
                                    remainder='passthrough')
lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(x_train,y_train)
Pipeline(steps=[('columntransformer',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('onehotencoder',
                                                  OneHotEncoder(categories=[array(['Audi A3 Cabriolet', 'Audi A4 1.8', 'Audi A4 2.0', 'Audi A6 2.0',
       'Audi A8', 'Audi Q3 2.0', 'Audi Q5 2.0', 'Audi Q7', 'BMW 3 Series',
       'BMW 5 Series', 'BMW 7 Series', 'BMW X1', 'BMW X1 sDrive20d',
       'BMW X1 xDrive20d', 'Chevrolet Beat', 'Chevrolet Beat...
                                                                            array(['Audi', 'BMW', 'Chevrolet', 'Datsun', 'Fiat', 'Force', 'Ford',
       'Hindustan', 'Honda', 'Hyundai', 'Jaguar', 'Jeep', 'Land',
       'Mahindra', 'Maruti', 'Mercedes', 'Mini', 'Mitsubishi', 'Nissan',
       'Renault', 'Skoda', 'Tata', 'Toyota', 'Volkswagen', 'Volvo'],
      dtype=object),
                                                                            array(['Diesel', 'LPG', 'Petrol'], dtype=object)]),
                                                  ['name', 'company',
                                                   'fuel_type'])])),
                ('linearregression', LinearRegression())])
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
y_pred = pipe.predict(x_test)
from sklearn.metrics import r2_score
r2_score(y_test,y_pred)
0.6751059322352486
scores = []
for i in range(1000):
    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=i)
    lr=LinearRegression()
    pipe=make_pipeline(column_trans,lr)
    pipe.fit(x_train,y_train)
    y_pred=pipe.predict(x_test)
    scores.append(r2_score(y_test,y_pred))
print(np.argmax(scores))
302
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=302)
lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(x_train,y_train)
y_pred=pipe.predict(x_test)
print(r2_score(y_test,y_pred))
0.8991190499074018
pipe.predict(pd.DataFrame(columns=x_test.columns,data=np.array(['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']).reshape(1,5)))
array([456549.33356479])
from xgboost import XGBRegressor
xgb = XGBRegressor()
xgb.fit(x_train,y_train)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Input In [57], in <module>
----> 1 xgb.fit(x_train,y_train)

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\core.py:532, in _deprecate_positional_args.<locals>.inner_f(*args, **kwargs)
    530 for k, arg in zip(sig.parameters, args):
    531     kwargs[k] = arg
--> 532 return f(**kwargs)

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\sklearn.py:931, in XGBModel.fit(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)
    880 """Fit gradient boosting model.
    881 
    882 Note that calling ``fit()`` multiple times will cause the model object to be
   (...)
    928         Use `callbacks` in :py:meth:`__init__` or :py:meth:`set_params` instead.
    929 """
    930 evals_result: TrainingCallback.EvalsLog = {}
--> 931 train_dmatrix, evals = _wrap_evaluation_matrices(
    932     missing=self.missing,
    933     X=X,
    934     y=y,
    935     group=None,
    936     qid=None,
    937     sample_weight=sample_weight,
    938     base_margin=base_margin,
    939     feature_weights=feature_weights,
    940     eval_set=eval_set,
    941     sample_weight_eval_set=sample_weight_eval_set,
    942     base_margin_eval_set=base_margin_eval_set,
    943     eval_group=None,
    944     eval_qid=None,
    945     create_dmatrix=lambda **kwargs: DMatrix(nthread=self.n_jobs, **kwargs),
    946     enable_categorical=self.enable_categorical,
    947 )
    948 params = self.get_xgb_params()
    950 if callable(self.objective):

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\sklearn.py:401, in _wrap_evaluation_matrices(missing, X, y, group, qid, sample_weight, base_margin, feature_weights, eval_set, sample_weight_eval_set, base_margin_eval_set, eval_group, eval_qid, create_dmatrix, enable_categorical)
    381 def _wrap_evaluation_matrices(
    382     missing: float,
    383     X: Any,
   (...)
    396     enable_categorical: bool,
    397 ) -> Tuple[Any, List[Tuple[Any, str]]]:
    398     """Convert array_like evaluation matrices into DMatrix.  Perform validation on the way.
    399 
    400     """
--> 401     train_dmatrix = create_dmatrix(
    402         data=X,
    403         label=y,
    404         group=group,
    405         qid=qid,
    406         weight=sample_weight,
    407         base_margin=base_margin,
    408         feature_weights=feature_weights,
    409         missing=missing,
    410         enable_categorical=enable_categorical,
    411     )
    413     n_validation = 0 if eval_set is None else len(eval_set)
    415     def validate_or_none(meta: Optional[Sequence], name: str) -> Sequence:

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\sklearn.py:945, in XGBModel.fit.<locals>.<lambda>(**kwargs)
    880 """Fit gradient boosting model.
    881 
    882 Note that calling ``fit()`` multiple times will cause the model object to be
   (...)
    928         Use `callbacks` in :py:meth:`__init__` or :py:meth:`set_params` instead.
    929 """
    930 evals_result: TrainingCallback.EvalsLog = {}
    931 train_dmatrix, evals = _wrap_evaluation_matrices(
    932     missing=self.missing,
    933     X=X,
    934     y=y,
    935     group=None,
    936     qid=None,
    937     sample_weight=sample_weight,
    938     base_margin=base_margin,
    939     feature_weights=feature_weights,
    940     eval_set=eval_set,
    941     sample_weight_eval_set=sample_weight_eval_set,
    942     base_margin_eval_set=base_margin_eval_set,
    943     eval_group=None,
    944     eval_qid=None,
--> 945     create_dmatrix=lambda **kwargs: DMatrix(nthread=self.n_jobs, **kwargs),
    946     enable_categorical=self.enable_categorical,
    947 )
    948 params = self.get_xgb_params()
    950 if callable(self.objective):

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\core.py:532, in _deprecate_positional_args.<locals>.inner_f(*args, **kwargs)
    530 for k, arg in zip(sig.parameters, args):
    531     kwargs[k] = arg
--> 532 return f(**kwargs)

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\core.py:643, in DMatrix.__init__(self, data, label, weight, base_margin, missing, silent, feature_names, feature_types, nthread, group, qid, label_lower_bound, label_upper_bound, feature_weights, enable_categorical)
    640     assert self.handle is not None
    641     return
--> 643 handle, feature_names, feature_types = dispatch_data_backend(
    644     data,
    645     missing=self.missing,
    646     threads=self.nthread,
    647     feature_names=feature_names,
    648     feature_types=feature_types,
    649     enable_categorical=enable_categorical,
    650 )
    651 assert handle is not None
    652 self.handle = handle

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\data.py:896, in dispatch_data_backend(data, missing, threads, feature_names, feature_types, enable_categorical)
    894     return _from_tuple(data, missing, threads, feature_names, feature_types)
    895 if _is_pandas_df(data):
--> 896     return _from_pandas_df(data, enable_categorical, missing, threads,
    897                            feature_names, feature_types)
    898 if _is_pandas_series(data):
    899     return _from_pandas_series(
    900         data, missing, threads, enable_categorical, feature_names, feature_types
    901     )

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\data.py:345, in _from_pandas_df(data, enable_categorical, missing, nthread, feature_names, feature_types)
    337 def _from_pandas_df(
    338     data: DataFrame,
    339     enable_categorical: bool,
   (...)
    343     feature_types: Optional[List[str]],
    344 ) -> Tuple[ctypes.c_void_p, FeatureNames, Optional[List[str]]]:
--> 345     data, feature_names, feature_types = _transform_pandas_df(
    346         data, enable_categorical, feature_names, feature_types
    347     )
    348     return _from_numpy_array(data, missing, nthread, feature_names, feature_types)

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\data.py:283, in _transform_pandas_df(data, enable_categorical, feature_names, feature_types, meta, meta_type)
    274     return is_int or is_bool
    276 if not all(
    277     dtype.name in _pandas_dtype_mapper
    278     or is_sparse(dtype)
   (...)
    281     for dtype in data.dtypes
    282 ):
--> 283     _invalid_dataframe_dtype(data)
    285 # handle feature names
    286 if feature_names is None and meta is None:

File ~\AppData\Roaming\Python\Python310\site-packages\xgboost\data.py:247, in _invalid_dataframe_dtype(data)
    242         err = ""
    244     msg = """DataFrame.dtypes for data must be int, float, bool or category.  When
    245 categorical type is supplied, DMatrix parameter `enable_categorical` must
    246 be set to `True`.""" + err
--> 247     raise ValueError(msg)

ValueError: DataFrame.dtypes for data must be int, float, bool or category.  When
categorical type is supplied, DMatrix parameter `enable_categorical` must
be set to `True`. Invalid columns:name, company, fuel_type
 
